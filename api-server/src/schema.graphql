###### Custom Scalars ######
scalar DateTime
scalar Void

type CacheLookUpResult {
  wasFound: Boolean!
  value: String # Will be set if the cache result was found.
  ttl: DateTime
}

input CacheSetInput {
  key: String! # Providing the same key, but different value and TTL will overwrite the cached object entirely.
  value: String! # Most likely stringified JSON.
  # If set, item will be expired from the cache at this time.
  # Providing no value means the item is permenantly exists until deleted.
  ttl: DateTime
}

type Query {
  get(key: String!): CacheLookUpResult! 
}

type Mutation {
  set(input: CacheSetInput!): Void

  # Management APIs
  createTenant(input: CreateTenantInput!): Tenant!
}

# Management APIs. Maybe exposed through a CLI or a Web App.
input CreateTenantInput {
  ingoreThis: String # Field is required but don't want  to break back compat.
}

type Tenant {
 tenantId: String!
}